{"version":3,"sources":["logo.svg","serviceWorker.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Car","state","color","this","React","Component","MyForm","props","mySubmitHandler","event","alert","username","myChangeHandler","setState","target","value","onSubmit","type","onChange","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qGAAAA,EAAOC,QAAU,IAA0B,kC,qMCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICZAC,E,YACJ,aAAe,IAAD,8BACZ,+CACKC,MAAQ,CAACC,MAAO,OAFT,E,sEAKZ,OAAO,sCAAYC,KAAKF,MAAMC,MAAvB,a,GANOE,IAAMC,WAgElBC,GArDeF,IAAMC,U,YAsDzB,WAAYE,GAAQ,IAAD,8BACjB,4CAAMA,KAGRC,gBAAkB,SAACC,GAEjBC,MAAM,sBAAwB,EAAKT,MAAMU,WANxB,EAQnBC,gBAAkB,SAACH,GACjB,EAAKI,SAAS,CAACF,SAAUF,EAAMK,OAAOC,SAPtC,EAAKd,MAAQ,CAAEU,SAAU,IAFR,E,sEAYjB,OACE,0BAAMK,SAAUb,KAAKK,iBACrB,qCAAWL,KAAKF,MAAMU,UACtB,2DACA,2BACEM,KAAK,OACLC,SAAUf,KAAKS,kBAEjB,2BACEK,KAAK,gB,GAtBQb,IAAMC,YA8B3Bc,IAASC,OAAO,kBAAC,EAAD,MAAYC,SAASC,eAAe,QD6B9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.c99e7087.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nclass Car extends React.Component {\n  constructor() {\n    super();\n    this.state = {color: \"red\"};\n  }\n  render() {\n    return <h2>I am a {this.state.color} Car!</h2>;\n  }\n}\n\n\nclass Garage extends React.Component {\n  render() {\n    return (\n      <div>\n      <h1>Who lives in my Garage?</h1>\n      <Car />\n      </div>\n    );\n  }\n}\n// class MyForm extends React.Component {\n//   constructor(props) {\n//     super(props);\n//     this.state = {\n//       username: '',\n//       age: null,\n//       errormessage: ''\n//     };\n//   }\n//   myChangeHandler = (event) => {\n//     let nam = event.target.name;\n//     let val = event.target.value;\n//     let err = '';\n//     if (nam === \"age\") {\n//       if (val !=\"\" && !Number(val)) {\n//         err = <strong>Your age must be a number</strong>;\n//       }\n//     }\n//     this.setState({errormessage: err});\n//     this.setState({[nam]: val});\n//   }\n//   render() {\n//     return (\n//       <form>\n//       <h1>Hello {this.state.username} {this.state.age}</h1>\n//       <p>Enter your name:</p>\n//       <input\n//         type='text'\n//         name='username'\n//         onChange={this.myChangeHandler}\n//       />\n//       <p>Enter your age:</p>\n//       <input\n//         type='text'\n//         name='age'\n//         onChange={this.myChangeHandler}\n//       />\n//       {this.state.errormessage}\n//       </form>\n//     );\n//   }\n// }\n\nclass MyForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { username: '' };\n  }\n  mySubmitHandler = (event) => {\n    //event.preventDefault();\n    alert(\"You are submitting \" + this.state.username);\n  }\n  myChangeHandler = (event) => {\n    this.setState({username: event.target.value});\n  }\n  render() {\n    return (\n      <form onSubmit={this.mySubmitHandler}>\n      <h1>Hello {this.state.username}</h1>\n      <p>Enter your name, and submit:</p>\n      <input\n        type='text'\n        onChange={this.myChangeHandler}\n      />\n      <input\n        type='submit'\n      />\n      </form>\n    );\n  }\n}\n\n\nReactDOM.render(<MyForm />, document.getElementById('car'));\n//function Car() {\n  //return <h2>Hi, I am also a Car!</h2>;\n//}\n//ReactDOM.render(<Car />, document.getElementById('car'));\n//ReactDOM.render(<App />, document.getElementById('root'));\n\n\n//class Car extends React.Component {\n  //render() {\n   // return <h2>I am a {this.props.color} Car!</h2>;\n  //}}\n\n//ReactDOM.render(<Car color=\"red\"/>, document.getElementById('root'));\n \n \n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n// class Car extends React.Component {\n//   render() {\n//     return <h2>I am a {this.props.brand.model}!</h2>;\n//   }\n// }\n\n// class Garage extends React.Component {\n//   render() {\n//     const carinfo = {name: \"Ford\", model: \"Mustang\"};\n//     return (\n//       <div>\n//       <h1>Who lives in my garage?</h1>\n//       <Car brand={carinfo} />\n//       </div>\n//     );\n//   }\n// }"],"sourceRoot":""}